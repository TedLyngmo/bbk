/* Compile with:
   gcc gdtest.c -I /usr/local/include -L /usr/local/lib -lgd -lz -lpng -ljpeg
*/

#include "graphstruct.h"

/* Bring in standard I/O so we can output the PNG to a file */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <sys/types.h>
#include <time.h>
#include <math.h>

Graphstruct::Graphstruct() {
  xsize = ysize = bgcolor = -1;
  header = NULL;
  header_size = gs_none;
  header_offx = header_offy = header_color = -1;
  x_units = NULL;
  x_units_offx = x_units_offy = x_units_color = -1;
  x_axis_y_offset = -1;
  x_axis_left = x_axis_right = -1;
  x_start = x_stop = x_step = -1;
  x_mark_height = x_color = -1;
  x_values_size = gs_none;
  y_units[0] = '\0';
  y_units_offx = y_units_offy = y_units_color = -1;
  y_units_size = gs_none;
  y_axis_x_offset = -1;
  y_axis_top = y_axis_bottom = -1;
  y_start = y_stop = y_step = -1.0;
  y_value_size = gs_none;
  y_value_decimals = -1;
  y_value_x_offset = -1;
  y_mark_length = y_color = -1;
  y_divisor = -1;
  info_x_offset = info_y_offset = -1;
  info_bgcolor = -1;
  info_box_font = gs_none;
  info_box_maxcolor = -1;
  info_box_mincolor = -1;
  info_box_avgcolor = -1;
  info_legend = 0;
  dash_color = -1;
  adash_color = -1;
  values = NULL;
  no_values = 0;
  point_color = point_width = point_height = -1;
  plot_bgcolor = -1;
  image = NULL;
}

void Graphstruct::add_value(int timestamp, double value) {
  no_values++;
  values = (struct valuestruct *)
    realloc(values, no_values * sizeof(struct valuestruct));
  if (values != NULL) {
    values[no_values-1].timestamp.tv_sec = timestamp;
    values[no_values-1].timestamp.tv_usec = 0;
    values[no_values-1].value = value;
  }
}

void Graphstruct::clear_values() {
  if (no_values > 0) {
    no_values = 0;
    free(values);
    values = NULL;
  }
}

/* returns no of values read from file */
int Graphstruct::load_values(char *filename) {
  char linebuf[1024], *p;
  int timestamp, no_read;
  double value;
  FILE * fp = fopen(filename, "rb");
  if (fp == NULL)
    return 0;
  no_read = 0;
  clear_values();
  while (!feof(fp)) {
    memset(linebuf, 0, 1024);
    fgets(linebuf, 1023, fp);
    p = linebuf;
    while (isdigit(*p))
      p++;
    *p = '\0';
    timestamp = atoi(linebuf);
    if (timestamp == 0)
      return no_read;
    p++;
    value = atof(p);
    add_value(timestamp, value);    
  }
  fclose(fp);
  return no_read;
}

int Graphstruct::save_values(char *filename) {
  int i;
  FILE *fp = fopen(filename, "wb");
  if (fp == NULL)
    return 0;
  for (i = 0; i < no_values; i++) {
    fprintf(fp, "%d %f\n", values[i].timestamp, values[i].value);
  }
  fclose(fp);
  return no_values;
}

Graphstruct::~Graphstruct() {
  if (image != NULL) {
    gdImageDestroy(image);
  }
  clear_values();
}

char * Graphstruct::format_timestamp(char *fmtstr, int timestamp) {
  struct tm *tmptm;
  /* hh mm DD MMM YYYY */
  static char ret[50];
  char months[][4] = { "Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec" };
  char * p = fmtstr;
  char * outp = ret;
  tmptm = localtime((const time_t *)&timestamp);
  /*
  printf("Time format is %s\n", fmtstr);
  printf("Formatting time %d-%02d-%02d %02d:%02d:%02d\n",
    tmptm.tm_year + 1900, tmptm.tm_mon + 1, tmptm.tm_mday,
    tmptm.tm_hour, tmptm.tm_min, tmptm.tm_sec);
	*/
  while (*p != '\0') {
	  if (strncmp(p, "ss", 2) == 0) {
		  sprintf(outp, "%02d", tmptm->tm_sec);
		  outp += 2;
		  p += 2;
		  continue;
	  }
    if (strncmp(p, "hh", 2) == 0) {
      sprintf(outp, "%02d", tmptm->tm_hour);
      outp += 2;
      p += 2;
      continue;
    }
    if (strncmp(p, "mm", 2) == 0) {
      sprintf(outp, "%02d", tmptm->tm_min);
      outp += 2;
      p += 2;
      continue;
    }
    if (strncmp(p, "DD", 2) == 0) {
      sprintf(outp, "%02d", tmptm->tm_mday);
      outp += 2;
      p += 2;
      continue;
    }
    if (strncmp(p, "MMM", 3) == 0) {
      sprintf(outp, "%s", months[tmptm->tm_mon]);
      outp += 3;
      p += 3;
      continue;
    }
    if (strncmp(p, "YYYY", 4) == 0) {
      sprintf(outp, "%04d", tmptm->tm_year + 1900);
      outp += 4;
      p += 4;
      continue;
    }
    if (strncmp(p, "YY", 2) == 0) {
      sprintf(outp, "%02d", tmptm->tm_year % 100);
      outp += 2;
      p += 2;
      continue;
    }
    if (strncmp(p, "MM", 2) == 0) {
      sprintf(outp, "%02d", tmptm->tm_mon+1);
      outp += 2;
      p += 2;
      continue;
    }
    *outp++ = *p++;
  }  
  *outp = '\0';
  return ret;
}


int Graphstruct::generate() {
  double yhigh, ylow, yspan, ytot, yavg, ylen;
  int xhigh, xlow, xspan, lx_color, ly_color, lbgcolor, lpointcolor, linfocolor;
  int no_steps, cur, ylenreal, xlen, xlenreal;
  int red, green, blue, lmaxcolor, lavgcolor, lmincolor, lyunitscolor, lplot_bgcolor;
  int ldash_color, ladash_color, lheader_color, i;
  int styleDashed[20];
  char old_timestamp[30] = "";
  char info_text_max[20], info_text_min[20], info_text_avg[20];
  char * p;

  char fmtstr[20], tmpstr[500];
  if (image != NULL) {
    gdImageDestroy(image);
    image = NULL;
  }

  /* set undefined values */
  if (xsize == -1) xsize = XSIZE;
  if (ysize == -1) ysize = YSIZE;

  if (bgcolor == -1) bgcolor = BGCOLOR;
  if (plot_bgcolor == -1) plot_bgcolor = PLOT_BGCOLOR;
  if (dash_color == -1) dash_color = DASH_COLOR;
  if (adash_color == -1) adash_color = ADASH_COLOR;

  if (header != NULL) {
    if (header_size == gs_none) header_size = gs_large;
    if (header_offx == -1) 
      header_offx = (xsize - (((int)strlen(header))*(int)(header_size)*2))/2;
    if (header_offy == -1)
      header_offy = (int)(header_size) * 2 + 10;
    if (header_color == -1)
      header_color = HEADER_COLOR;
  }

  if (x_axis_left == -1) x_axis_left = X_AXIS_LEFT;
  if (x_axis_right == -1) x_axis_right = X_AXIS_RIGHT;
  if (x_start == -1 && x_stop == -1 && x_step == -1) {
    int i;
    xhigh = xlow = values[0].timestamp.tv_sec;
    for (i = 0; i < no_values; i++) {
      if (values[i].timestamp.tv_sec < xlow) 
        xlow = values[i].timestamp.tv_sec;
      if (values[i].timestamp.tv_sec > xhigh) 
        xhigh = values[i].timestamp.tv_sec;
    }
    xspan = xhigh - xlow;
    if (xspan <= 200) {
      x_step = 30;
	  strcpy(x_step_str, "hh:mm:ss");
      /* "14:32, 14:33" */
    }
	else if (xspan <= 400) {
	  x_step = 60;
	  strcpy(x_step_str, "hh:mm:ss");
	}
    else if (xspan <= 800) {
      x_step = 120;
      strcpy(x_step_str, "hh:mm");
      /* "14:35, 14:40" */
    }
	else if (xspan <= 1800) {
	  x_step = 300;
	  strcpy(x_step_str, "hh:mm");
	}
    else if (xspan <= 3600) {
      x_step = 600;
      strcpy(x_step_str, "hh:mm");
      /* "14:45, 15:00" */
    }
	else if (xspan <= 7200) {
		x_step = 900;
      strcpy(x_step_str, "hh:mm");
	}
	else if (xspan <= 14400) {
		x_step = 1800;
      strcpy(x_step_str, "hh:mm");
	}
    else if (xspan <= 43200) {
      x_step = 3600;
      strcpy(x_step_str, "hh:mm");
      /* "14:00, 15:00" */
    }
	else if (xspan <= 86400) {
		x_step = 3600 * 3;
      strcpy(x_step_str, "hh:mm");
	}
    else if (xspan <= (86400 * 2)) {
      x_step = (3600 * 6);
      strcpy(x_step_str, "hh:mm");
      /* "14:00, 18:00" */
    }
    else if (xspan <= (86400 * 4)) {
      x_step = 43200;
      strcpy(x_step_str, "hh:mm");
      /* "Aug 15 14:30", "Aug 16 02:30" */
    }
    else if (xspan <= (86400 * 8)) {
      x_step = 86400;
	  strcpy(x_step_str, "hh:mm");
      /* "Aug 15, Aug 17" */
    }
    else if (xspan <= (86400 * 16)) {
      x_step = 86400 * 2;
	  strcpy(x_step_str, "hh:mm");
      /* "Aug 15 2005, Aug 22 2005" */
    }
	else if (xspan <= (86400 * 32)) {
		x_step = 86400 * 4;
		strcpy(x_step_str, "MMM DD");
	}
	else if (xspan <= (86400 * 100)) {
		x_step = 86400 * 14;
		strcpy(x_step_str, "MMM DD");
	}
    else if (xspan <= (400 * 86400)) {
      x_step = 86400 * 30;
      strcpy(x_step_str, "MMM YYYY");
      /* "Aug 2005, Sep 2005" */
    }
    else if (xspan <= (2000 * 86400)) {
      x_step = 86400 * 180;
      strcpy(x_step_str, "MMM YYYY");
      /* "Aug 2005, Feb 2006" */
    }
    else {
      x_step = 86400 * 365;
      strcpy(x_step_str, "YYYY");
      /* "2005, 2006" */
    }
    x_start = (xlow / x_step) * x_step;
    x_stop = xhigh + (xhigh % x_step);    
  }

  if (((x_stop - x_start) / x_step) < 2) {
    x_stop += x_step;
	x_start -= x_step;
  }

  strcpy(x_step_str2, "YYMMDD");
  if (x_mark_height == -1)
    x_mark_height = X_MARK_HEIGHT;
  if (x_color == -1)
    x_color = X_COLOR;
  if (x_values_size == gs_none)
    x_values_size = X_VALUE_SIZE;

  if (x_units != NULL) {
    if (x_units_size == gs_none) 
      x_units_size = X_UNITS_SIZE;
    if (x_units_offx == -1)
      x_units_offx = x_axis_right + 30;
    if (x_units_offy  == -1)
      x_units_offy = x_axis_y_offset;
    if (x_units_color == -1)
      x_units_color = X_UNITS_COLOR;
  }

  ytot = 0.0f;
  if (no_values > 0) {
    int i;
//    printf("Going through added values\n");
    yhigh = ylow = values[0].value;
    for (i = 0; i < no_values; i++) {
      if (values[i].value < ylow) ylow = values[i].value;
      if (values[i].value > yhigh) yhigh = values[i].value;
      ytot += values[i].value;
    }
  }
  else {
    if (y_start == -1 || y_stop == -1)
      return -1;
    yhigh = y_stop;
    ylow = y_start;
  }
  yavg = ytot / (float)no_values;
  yspan = yhigh - ylow;

//  printf("yhigh=%f, ylow=%f, yspan=%f\n", yhigh, ylow, yspan);

  

  double ylog = pow(10.0, (double)((int)(log10(yhigh)+0.5)));
  if (y_start == -1)
    y_start = ylow - (ylow - (((unsigned int)(ylow / ylog)) * ylog));
  if (y_stop == -1)
    y_stop = yhigh + ((((unsigned int)(yhigh / ylog)+1) * ylog) - yhigh);	
  if (y_step == -1)
	  y_step = (y_stop - y_start) / 5;
  if (y_divisor == -1)
	  y_divisor = Y_DIVISOR;

  y_start /= y_divisor;
  y_stop /= y_divisor;
  y_step /= y_divisor;

/*
  if (y_start == -1)
    y_start = ylow - (yspan / 5);
  if (y_stop == -1)
    y_stop = yhigh + (yspan/5);
  if (y_step == -1) 
    y_step = yspan / 5;
*/

  if (y_axis_top == -1) y_axis_top = Y_AXIS_TOP;
  if (y_axis_bottom == -1) y_axis_bottom = Y_AXIS_BOTTOM;

  if (y_axis_x_offset == -1) y_axis_x_offset = x_axis_left;
//  printf("x_axis_y_offset = %d\n", x_axis_y_offset);
  if (x_axis_y_offset == -1) x_axis_y_offset = y_axis_bottom;
//  printf("x_axis_y_offset = %d\n", x_axis_y_offset);

  if (strlen(y_units)) {
    if (y_units_size == gs_none) 
      y_units_size = Y_UNITS_SIZE;
    if (y_units_offx == -1) {
      y_units_offx = 
        x_axis_left - ((int)strlen(y_units)) * (y_units_size + 2);
    }
    if (y_units_offy  == -1)
      y_units_offy = y_axis_top - 30;
    if (y_units_color == -1)
      y_units_color = Y_UNITS_COLOR;
  }

  if (y_value_decimals == -1) {
    if (yspan < 1) y_value_decimals = 2;
    else if (yspan < 5) y_value_decimals = 1;
    else y_value_decimals = 0;
  }

  if (y_value_size == gs_none) y_value_size = Y_VALUE_SIZE;

  if (y_value_x_offset == -1) y_value_x_offset = 5;

  if (y_mark_length == -1) y_mark_length = Y_MARK_LENGTH;
  if (y_color == -1) y_color = Y_COLOR;

//  printf("info_xsize = %d\n", info_xsize);

  sprintf(fmtstr, "Max: %%.%df %s", y_value_decimals, y_units);
  if (fmtstr[strlen(fmtstr)-1] == '%')
	  strcat(fmtstr, "%");
  sprintf(info_text_max, fmtstr, yhigh / y_divisor);

  sprintf(fmtstr, "Min: %%.%df %s", y_value_decimals, y_units);
  if (fmtstr[strlen(fmtstr)-1] == '%')
	  strcat(fmtstr, "%");
  sprintf(info_text_min, fmtstr, ylow / y_divisor);

  sprintf(fmtstr, "Med: %%.%df %s", y_value_decimals, y_units);
  if (fmtstr[strlen(fmtstr)-1] == '%')
	  strcat(fmtstr, "%");
  sprintf(info_text_avg, fmtstr, yavg / y_divisor);

  if (info_legend) {
	  info_xsize =	(int)(	strlen(info_text_min) + 5 +
							strlen(info_text_max) + 5 +
							strlen(info_text_avg)
						 ) * (info_box_font+7); 
	  info_ysize = info_box_font+12;
	  if (info_x_offset == -1) info_x_offset = y_axis_x_offset;
	  if (info_y_offset == -1) info_y_offset = ysize - 30;
  }
  else {
	  info_xsize = ((int)strlen(info_text_max)) * (info_box_font+7);
	  if (info_xsize < (((int)strlen(info_text_min)) * (info_box_font+7)))
	    info_xsize = ((int)strlen(info_text_min)) * (info_box_font+7);
	  if (info_xsize < (((int)strlen(info_text_avg)) * (info_box_font+7)))
	    info_xsize = ((int)strlen(info_text_avg)) * (info_box_font+7);
	  info_ysize = 3*(info_box_font+12);  
	  if (info_x_offset == -1) info_x_offset = xsize - info_xsize - 5;
	  if (info_y_offset == -1) info_y_offset = y_axis_top;
  }
  if (info_bgcolor == -1) info_bgcolor = INFO_BGCOLOR;
  if (info_box_maxcolor == -1) info_box_maxcolor = INFO_MAXCOLOR;
  if (info_box_mincolor == -1) info_box_mincolor = INFO_MINCOLOR;
  if (info_box_avgcolor == -1) info_box_avgcolor = INFO_AVGCOLOR;

  if (info_box_font == gs_none) info_box_font = INFO_BOX_FONT;

  if (point_color == -1) point_color = POINT_COLOR;
  if (point_width == -1) point_width = POINT_WIDTH;
  if (point_height == -1) point_height = POINT_HEIGHT;

  image = gdImageCreate(xsize, ysize);



  //
  // Finally draw stuff!
  //

  // Allocate colors
  lbgcolor = GDCOLORALLOC(image, bgcolor);
  red = GDCOLORALLOC(image, 0xFF0000);
  green = GDCOLORALLOC(image, 0x00FF00);
  blue = GDCOLORALLOC(image, 0x0000FF);
  lyunitscolor = GDCOLORALLOC(image, y_units_color);
  ldash_color = GDCOLORALLOC(image, dash_color);
  ladash_color = GDCOLORALLOC(image, adash_color);
  lx_color = GDCOLORALLOC(image, x_color);
  ly_color = GDCOLORALLOC(image, y_color);
  lheader_color = GDCOLORALLOC(image, header_color);

  // Load fonts
  font_arr[gs_tiny] = gdFontGetTiny();
  font_arr[gs_small] = gdFontGetSmall();
  font_arr[gs_mediumbold] = gdFontGetMediumBold();
  font_arr[gs_large] = gdFontGetLarge();
  font_arr[gs_giant] = gdFontGetGiant();

  // Draw plot background
  lplot_bgcolor = GDCOLORALLOC(image, plot_bgcolor);
  gdImageFilledRectangle(image,
    x_axis_left,
	y_axis_top,
	x_axis_right,
	y_axis_bottom,
	lplot_bgcolor
  );

  // Set up dashed style
  for (i = 0; i < 5; i++)
//    styleDashed[i] = ldash_color;
    styleDashed[i] = gdTransparent;
  for (i = 5; i < 10; i++)
//    styleDashed[i] = gdTransparent;
    styleDashed[i] = ldash_color;
  gdImageSetStyle(image, styleDashed, 10);

//  printf("ystart = %f, ystop = %f, ystep = %f\n", y_start, y_stop, y_step);

  // Draw Y-axis marks
  no_steps = (int)((y_stop - y_start) / y_step);
  ylen = y_stop - y_start;
  ylenreal = y_axis_bottom - y_axis_top;
//  printf("no_steps: %d, ylen: %d, ylenreal: %d\n", no_steps, ylen, ylenreal);
  for (cur = 0; cur <= no_steps; cur++) {
    int ypos;
    ypos = y_axis_bottom - (int)
       ((((float)cur / (float)no_steps) * (float)ylenreal));
    sprintf(fmtstr, "%%.%df", y_value_decimals);
    sprintf(tmpstr, fmtstr, (float)y_start+((float)cur*y_step));
/*
	printf("Drawing Y-step %d (val %.2f = %d.%d -> %d.%d)\n", cur, 
      (float)y_start+((float)cur*(float)y_step),
      y_axis_x_offset - y_mark_length / 2, 
      ypos - (y_value_size+1),
//      y_axis_bottom - (cur*((y_axis_bottom - y_axis_top)/no_steps)), 
      y_axis_x_offset + y_mark_length / 2,
      ypos - (y_value_size+1)
    );
	*/
    gdImageString(image, font_arr[y_value_size], y_value_x_offset, 
      ypos - (y_value_size+1),
      (unsigned char *)tmpstr, ly_color
    );

	// draw dashed line
	gdImageLine(image, 
		y_axis_x_offset,
		ypos,
		x_axis_right,
		ypos,
		gdStyled
	);

	gdImageLine(image, 
      y_axis_x_offset - y_mark_length / 2, 
//      y_axis_bottom - (cur*((y_axis_bottom - y_axis_top)/no_steps)), 
      ypos,
      y_axis_x_offset + y_mark_length / 2,
//      y_axis_bottom - (cur*((y_axis_bottom - y_axis_top)/no_steps)),
      ypos,
      ly_color
    );

  }

  // Draw X-axis marks
  no_steps = (x_stop - x_start) / x_step;
//  printf("no_steps: %d\n", no_steps);
  for (cur = 0; cur <= no_steps; cur++) {
	  /*
    printf("Drawing step %d (%d.%d -> %d.%d)\n", cur,
      x_axis_left + (cur*(x_axis_right - x_axis_left)/no_steps),
      x_axis_y_offset - (x_mark_height / 2),
      x_axis_left + (cur*(x_axis_right - x_axis_left)/no_steps),
      x_axis_y_offset + (x_mark_height / 2),
      x_color
    );
	*/

    p = format_timestamp(
            x_step_str, 
            x_start + cur * (x_stop - x_start)/no_steps
        );
    gdImageString(image, font_arr[x_values_size],
      x_axis_left + 
        (cur*(x_axis_right - x_axis_left)/no_steps) -
        (((int)strlen(p)) * (x_values_size+1)),
      x_axis_y_offset + x_mark_height, 
      (unsigned char *)p,
      lx_color
    );
    p = format_timestamp(
            x_step_str2,
            x_start + cur * (x_stop - x_start)/no_steps
        );
    if (strcmp(old_timestamp, p)) {
      strcpy(old_timestamp, p);
      gdImageString(image, font_arr[x_values_size],
        x_axis_left +
          (cur*(x_axis_right - x_axis_left)/no_steps) -
          (((int)strlen(p)) * (x_values_size+1)),
        x_axis_y_offset + x_mark_height + 10,
        (unsigned char *)p,
        lx_color
      );
    }

	// draw dashed line
	gdImageLine(image, 
		x_axis_left + (cur*(x_axis_right - x_axis_left)/no_steps),
		y_axis_top,
		x_axis_left + (cur*(x_axis_right - x_axis_left)/no_steps),
		y_axis_bottom,
		gdStyled
	);

	gdImageLine(image, 
      x_axis_left + (cur*(x_axis_right - x_axis_left)/no_steps),
      x_axis_y_offset - (x_mark_height / 2),
      x_axis_left + (cur*(x_axis_right - x_axis_left)/no_steps),
      x_axis_y_offset + (x_mark_height / 2),
      lx_color
    );

  }

  xlen = x_stop - x_start;
  xlenreal = x_axis_right - x_axis_left;

  // Draw X-axis
  gdImageLine(image, x_axis_left, x_axis_y_offset, 
              x_axis_right, x_axis_y_offset, lx_color);
  // Draw Y-axis
  gdImageLine(image, y_axis_x_offset, y_axis_top, 
              y_axis_x_offset, y_axis_bottom, ly_color);

  // Draw header text, if we have one
  if (header) {
      gdImageString(image, font_arr[header_size], header_offx, 
      header_offy,
	  (unsigned char *)header, lheader_color
    );
  }

  // Plot graph points
  lpointcolor = GDCOLORALLOC(image,point_color);
  for (cur = 0; cur < no_values; cur++) {
    int realx, realy;
	realx =
      x_axis_left + (int) (
		((double)(values[cur].timestamp.tv_sec - x_start) /
		 (double)xlen) * (double)xlenreal
		 );
    realy = y_axis_bottom - (int)
      ((float)((values[cur].value/y_divisor) - y_start) / (float)ylen *
       (float)ylenreal);
//    printf("Plotting point at %d.%d (val: %.2f)\n", realx, realy, values[cur].value);
    gdImageFilledEllipse(image, realx, realy, point_width,
       point_height, lpointcolor);
  }



  // Plot info box

  linfocolor = GDCOLORALLOC(image, info_bgcolor);

  /*
  printf("Drawing info box at %d.%d->%d.%d\n",
    info_x_offset,
    info_y_offset,
    info_x_offset + info_xsize,
    info_y_offset + info_ysize
  );  
  */
  gdImageFilledRectangle(image,
    info_x_offset, 
    info_y_offset,
    info_x_offset + info_xsize, 
    info_y_offset + info_ysize,
    linfocolor
  );

  lmaxcolor = GDCOLORALLOC(image, info_box_maxcolor);
  lavgcolor = GDCOLORALLOC(image, info_box_avgcolor);
  lmincolor = GDCOLORALLOC(image, info_box_mincolor);
  if (info_legend) {
	  char tmpstr[100];
	  int off = info_x_offset + 3;
	  sprintf(tmpstr, "Antal mtvarden: %d", no_values);
	  gdImageString(image, font_arr[info_box_font],
		  off,
		  info_y_offset + 1,
		  (unsigned char *)tmpstr,
		  lx_color
	  );
	  off += (((int)strlen(tmpstr)+5)*7);
	  gdImageString(image, font_arr[info_box_font],
	    off,
	    info_y_offset + 1,
	    (unsigned char *)info_text_max,
	    lmaxcolor
	  );
	  off += (((int)strlen(info_text_max)+5)*7);
	  gdImageString(image, font_arr[info_box_font],
	    off,
	    info_y_offset + 1,
	    (unsigned char *)info_text_avg,
	    lavgcolor
	  );
	  off += (((int)strlen(info_text_avg)+5)*7);
	  gdImageString(image, font_arr[info_box_font],
	    off,
	    info_y_offset + 1,
	    (unsigned char *)info_text_min,
	    lmincolor
	  );
  }
  else {
	  gdImageString(image, font_arr[info_box_font],
	    info_x_offset + 3,
	    info_y_offset + 1,
	    (unsigned char *)info_text_max,
	    lmaxcolor
	  );
	  gdImageString(image, font_arr[info_box_font],
	    info_x_offset + 3,
	    info_y_offset + 1 + 11,
	    (unsigned char *)info_text_avg,
	    lavgcolor
	  );
	  gdImageString(image, font_arr[info_box_font],
	    info_x_offset + 3,
	    info_y_offset + 1 + 22,
	    (unsigned char *)info_text_min,
	    lmincolor
	  );
  }

  // Set up dashed style for avg line
  for (i = 0; i < 10; i++)
    styleDashed[i] = ladash_color;
  for (i = 10; i < 20; i++)
    styleDashed[i] = gdTransparent;
  gdImageSetStyle(image, styleDashed, 20);
  int ypos = y_axis_bottom - (int)
	  (
	  ((yavg/y_divisor)/(double)(y_stop - y_start)) * 
	  (double)(y_axis_bottom - y_axis_top)
	  );
  
  gdImageLine(image, 
    y_axis_x_offset,
    ypos,
    x_axis_right,
    ypos,
    gdStyled
  );
  /*
  gdImageLine(image, 
    y_axis_x_offset,
    ypos,
    x_axis_right,
    ypos,
    ladash_color
  );
  */

  if (strlen(y_units)) {
    gdImageString(image, font_arr[y_units_size],
      y_units_offx,
      y_units_offy,
      (unsigned char *)y_units,
      lyunitscolor
    );
  }


//  gdImageFilledRectangle(image, x1, y1, x2, y2, color);

  return 0;

}


