#include <stdio.h>
#include <errno.h>
#include <fcntl.h>

#ifdef __WIN32
#include <winsock2.h>
#include <process.h>
#endif

#ifdef UNIX
#include <unistd.h>
#include <sys/socket.h>
#endif

#include "curl_get.h"
#include "executor.h"
#include "valuestruct.h"
#include "tvutils.h"
#include "curl.h"

#ifdef __WIN32
#define pthread_exit _endthreadex
#endif

int my_fwrite(void *buffer, size_t size, size_t nmemb, void *stream)
{
	return (int)nmemb;
}

void * curl_get_executor(void *arg) 
{
  struct curl_get_arg_struct *a;
  struct thread_arg_struct *t;
  double dtmp;
  int vals, i, j, still_running;
  static int curl_initialized = 0;
  CURL * mhandle;
  CURL * ehandle;

  t = (struct thread_arg_struct *)arg;
  a = (struct curl_get_arg_struct *)t->thread_args;

  t->progress = 0;
  t->completion = false;
  t->executing = true;
  t->started = true;

	printf("Thread starting\n");

#ifdef WIN32
	if (Init_gettimeofday() != 1) {
		printf("Init_gettimeofday() failed\n");
		goto error;
	}
#endif

  a->values = (struct valuestruct *)
    calloc(sizeof(struct valuestruct), a->number_urls);  
  a->no_values = a->number_urls;

  if (curl_initialized == 0) {
	  if (curl_global_init(CURL_GLOBAL_DEFAULT) != 0) {
		  printf("curl_global_init() failed\n");
		goto error;
	  }
	  curl_initialized = 1;
  }

	printf("CURL initialized\n");

  for (i = 0; i < (int)a->number_urls; i++) {

    /* Check if we should hibernate */
    while (t->execute == false || t->die == true) {
      t->executing = false;
      /* Check if we should die during hibernation */
      if (t->die == true) {
  		curl_global_cleanup();
		goto error;
      }
      usleep(100000);
    }
    t->executing = true;

    printf("Executing URL %s\n", a->url_list[i]); 

	/* init a new http/ftp get operation */
	if ((mhandle = curl_multi_init()) == NULL) {
		printf("curl_multi_init() failed\n");
		curl_global_cleanup();
		goto error;
	}
	if ((ehandle = curl_easy_init()) == NULL) {
		printf("curl_easy_init() failed\n");
		curl_multi_cleanup(mhandle);
		curl_global_cleanup();
		goto error;
	}
	if (curl_easy_setopt(ehandle, CURLOPT_URL, a->url_list[i]) != CURLE_OK) {
		printf("curl_easy_setopt() ret error\n");
		curl_multi_cleanup(mhandle);
		curl_easy_cleanup(ehandle);
		curl_global_cleanup();
		goto error;
	}
	if (curl_easy_setopt(ehandle, CURLOPT_WRITEFUNCTION, my_fwrite) != CURLE_OK) {
		printf("curl_easy_setopt() failed\n");
		curl_multi_cleanup(mhandle);
		curl_easy_cleanup(ehandle);
		curl_global_cleanup();
		goto error;
	}
	curl_multi_add_handle(mhandle, ehandle);

	while (CURLM_CALL_MULTI_PERFORM == 
		curl_multi_perform(mhandle, &still_running));

	while (still_running) {

		struct timeval tv;
		int ret, maxfd;
		fd_set fdr, fdw, fde;

		tv.tv_sec = 0;
		tv.tv_usec = 100000;
		FD_ZERO(&fdr);
		FD_ZERO(&fdw);
		FD_ZERO(&fde);
		maxfd = 0;
		curl_multi_fdset(mhandle, &fdr, &fdw, &fde, &maxfd);
		ret = select(maxfd+1, &fdr, &fdw, &fde, &tv);

		switch (ret) {
			case -1:
				break;
			case 0:
				break;
			default:
				while (CURLM_CALL_MULTI_PERFORM ==
					curl_multi_perform(mhandle, &still_running));
				break;
		}

		/* Check if we should hibernate */
		while (t->execute == false || t->die == true) {
			t->executing = false;
			/* Check if we should die during hibernation */
			if (t->die == true) {
				curl_multi_remove_handle(mhandle, ehandle);
				curl_easy_cleanup(ehandle);
				curl_multi_cleanup(mhandle);
				curl_global_cleanup();
				goto error;
			}
			usleep(100000);
		}
		t->executing = true;
		
	}

	t->progress = (unsigned char)(((i+1) * 100) / a->number_urls);

	if (curl_easy_getinfo(
		ehandle, 
		CURLINFO_SPEED_DOWNLOAD, 
		&(a->values[i].value)) == CURLE_OK) 
	{
		a->values[i].value *= 8.0;
		a->connects++;
		printf("Result: %.0f bps\n", a->values[i].value);
	}
	else {
			a->values[i].value = -1.0;
			printf("No speed available\n");
	}

	gettimeofday(&(a->values[i].timestamp), NULL);

	/* set max/min values */
	if (i == 0 || a->values[i].value > a->max_speed)
		a->max_speed = a->values[i].value;
	if (i == 0 || a->values[i].value < a->min_speed)
		a->min_speed = a->values[i].value;

	/* calculate average */
	dtmp = 0.0;
	vals = 0;
	for (j = 0; j <= i; j++) {
		if (a->values[j].value != -1.0) {
			dtmp += a->values[j].value;
			vals++;
		}
	}
	a->avg_speed = dtmp / (float)vals;

	printf("Cleaning up\n");

	curl_multi_remove_handle(mhandle, ehandle);
	curl_easy_cleanup(ehandle);
	curl_multi_cleanup(mhandle);

  }

  t->progress = 100;
  t->completion = true;
  t->executing = false;
  curl_global_cleanup();
  pthread_exit(NULL);

error:

	t->completion = false;
	t->executing = false;		
	pthread_exit(0);

  return NULL;  // to make compiler happy

}

void delete_curl_get_arg_struct(struct curl_get_arg_struct *p) {
  if (p->values != NULL)
    free(p->values);
  free(p);
}

struct curl_get_arg_struct * new_curl_get_arg_struct() {
  struct curl_get_arg_struct *ret;
  ret = (struct curl_get_arg_struct *)
    calloc(sizeof(struct curl_get_arg_struct), 1);
  ret->number_urls = 0;
  ret->url_list = NULL;
  ret->no_values = 0;
  ret->values = NULL;
  return ret;
}


