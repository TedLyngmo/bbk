#include "TestMarshall.h" 
 
TestMarshall* TestMarshall::s_instance = 0; 
 
TestMarshall::TestMarshall(void) 
{ 
} 
 
TestMarshall::~TestMarshall(void) 
{ 
} 
 
bool TestMarshall::SetupStandardTest(void) 
{ 
	if( ::g_ServerList->GetCount() <= 0 ) 
	{ 
		return false; 
	} 
 
	Server *srv = ::g_ServerList->Item(0)->GetData(); 
 
	long port; 
	srv->TPTest_Port.ToLong( &port ); 
	 
	hostent *host = gethostbyname( TOCSTR(srv->Host) ); 
 
	if( host == NULL || port == 0 ) 
	{ 
		return false; 
	} 
	m_engp_downstream[0]->hostIP.s_addr = ((IN_ADDR *)(host->h_addr_list[0]))->s_addr;
	m_engp_downstream[0]->hostCtrlPort = port;
	m_engp_downstream[0]->tpMode = CLM_AUTO_TCP_RECV;
//	m_engp_downstream[0]->tcpBytes = 100000;
//	m_engp_downstream[0]->sessionMaxTime = 20;

	strcpy( m_engp_downstream[0]->clientInfo, "tptest5 V1.0");  
 
	// Set the executor function 
#ifdef UNIX 
	m_test_executor = tp_test_executor; 
#endif 
#ifdef WIN32 
	m_test_executor = (LPTHREAD_START_ROUTINE)tp_test_executor; 
#endif 
	return true; 
} 
 
/* 
	Setup Full TPTest used in Report 
*/ 
bool TestMarshall::SetupFullTPTest() 
{ 
	if( ::g_ServerList->GetCount() == 0 ) 
	{ 
		return false; 
	} 
 
	Server *srv = ::g_ServerList->Item(0)->GetData(); 
	 

	m_engp_downstream[0]->userdata = srv;
	m_engp_downstream[1]->userdata = srv;
	m_engp_upstream[0]->userdata = srv;
	m_engp_upstream[1]->userdata = srv; 
 
	hostent *host = gethostbyname( TOCSTR(srv->Host) ); 
 
	if( host == NULL ) 
	{ 
		return false; 
	} 

	m_engp_downstream[0]->hostIP.s_addr = ((IN_ADDR *)(host->h_addr_list[0]))->s_addr;
	m_engp_downstream[1]->hostIP.s_addr = ((IN_ADDR *)(host->h_addr_list[0]))->s_addr;
	m_engp_upstream[0]->hostIP.s_addr = ((IN_ADDR *)(host->h_addr_list[0]))->s_addr;
	m_engp_upstream[1]->hostIP.s_addr = ((IN_ADDR *)(host->h_addr_list[0]))->s_addr;
 
	long port; 
	srv->TPTest_Port.ToLong( &port ); 
	m_engp_downstream[0]->hostCtrlPort = (unsigned short)port;
	m_engp_downstream[1]->hostCtrlPort = (unsigned short)port;
	m_engp_upstream[0]->hostCtrlPort = (unsigned short)port;
	m_engp_upstream[1]->hostCtrlPort = (unsigned short)port;

	strcpy(m_engp_downstream[0]->clientInfo, "tptest5 V1.0");  
	strcpy(m_engp_downstream[1]->clientInfo, "tptest5 V1.0");  
	strcpy(m_engp_upstream[0]->clientInfo, "tptest5 V1.0");  
	strcpy(m_engp_upstream[1]->clientInfo, "tptest5 V1.0"); 
 
	// important, don't mix this up! index 0 = TCP, 1 = UDP 
	m_engp_downstream[0]->tpMode = CLM_AUTO_TCP_RECV;
	m_engp_downstream[1]->tpMode = CLM_AUTO_UDP_RECV;
	m_engp_upstream[0]->tpMode = CLM_AUTO_TCP_SEND; 
	m_engp_upstream[1]->tpMode = CLM_AUTO_UDP_SEND; 
 
	m_engp_downstream_ta[0]->thread_args = m_engp_downstream[0];
	m_engp_downstream_ta[1]->thread_args = m_engp_downstream[1];
	m_engp_upstream_ta[0]->thread_args = m_engp_upstream[0];
	m_engp_upstream_ta[1]->thread_args = m_engp_upstream[1];

#ifdef WIN32
	m_engp_downstream_ta[0]->start_routine = (LPTHREAD_START_ROUTINE)tp_test_executor;
	m_engp_downstream_ta[1]->start_routine = (LPTHREAD_START_ROUTINE)tp_test_executor;
	m_engp_upstream_ta[0]->start_routine = (LPTHREAD_START_ROUTINE)tp_test_executor;
	m_engp_upstream_ta[1]->start_routine = (LPTHREAD_START_ROUTINE)tp_test_executor;
#endif
#ifdef UNIX
	m_engp_downstream_ta[0]->start_routine = tp_test_executor;
	m_engp_downstream_ta[1]->start_routine = tp_test_executor;
	m_engp_upstream_ta[0]->start_routine = tp_test_executor;
	m_engp_upstream_ta[1]->start_routine = tp_test_executor;
#endif
	batch_add_thread_arg( m_batch, m_engp_downstream_ta[0] ); 
	batch_add_thread_arg( m_batch, m_engp_downstream_ta[1] ); 
	batch_add_thread_arg( m_batch, m_engp_upstream_ta[0] );
	batch_add_thread_arg( m_batch, m_engp_upstream_ta[1] );
 
	// Set the executor function 
#ifdef UNIX 
	m_test_executor = batch_executor; 
#endif 
#ifdef WIN32 
	m_test_executor = (LPTHREAD_START_ROUTINE)batch_executor; 
#endif 
 
 
	return true; 
	return true; 
} 
 
 
/* 
	Argument ServerList is an already filtered version of g_ServerList. 
	It contains only the servers with applicable settings for this particular 
	test. 
*/ 
bool TestMarshall::SetupAvailabilityTest(ServerList *slist) 
{ 
 
	for ( ServerList::Node *node = slist->GetFirst(); node; node = node->GetNext() ) 
	{ 
		Server *srv = node->GetData(); 
 
		if( !srv->EnableAvailability ) 
			continue; 
 
		if( srv->EnableAvailabilityTCP ) 
		{ 
			m_TCP_PingList->Append( srv ); 
		} 
 
		if( srv->EnableAvailabilityICMP ) 
		{ 
			m_ICMP_PingList->Append( srv ); 
		} 
	} 
 
	int iTCP_PingCount = (int)m_TCP_PingList->GetCount(); 
	int iICMP_PingCount = (int)m_ICMP_PingList->GetCount(); 
 
	if( iTCP_PingCount == 0 && 
		iICMP_PingCount == 0 ) 
	{ 
		return false; 
	} 
 
	// Setup TCP Ping 
	in_addr_t * tcp_hostlist;
	unsigned short * tcp_portlist; 

	tcp_hostlist = (in_addr_t *)malloc(sizeof(in_addr_t)*iTCP_PingCount);
	tcp_portlist = (unsigned short *)malloc(sizeof(unsigned short)*iTCP_PingCount);  
 
	int iMax = iTCP_PingCount; 
	for( int i = 0 ; i < iMax ; i++ ) 
	{ 
		Server *srv = m_TCP_PingList->Item(i)->GetData(); 
		hostent *host = gethostbyname( TOCSTR(srv->Host) ); 
		 
		if( host == NULL ) 
		{ 
			iTCP_PingCount--; 
			continue; 
		} 
 
#ifdef UNIX
		tcp_hostlist[i] = ((IN_ADDR *)(host->h_addr_list[0]))->s_addr; 
#endif
#ifdef WIN32
		tcp_hostlist[i].s_addr = ((IN_ADDR *)(host->h_addr_list[0]))->s_addr; 
#endif

		long port; 
		srv->TCP_Port.ToLong( &port ); 
		tcp_portlist[i] = (unsigned short)port; 
	} 
 
	m_tp->hostlist = (in_addr*)tcp_hostlist;
	m_tp->portlist = tcp_portlist;
	m_tp->number_hosts = iTCP_PingCount;
	m_tp->timeout_ms = 2000;

	m_tp->userdata = m_TCP_PingList;

	// Setup ICMP Ping
	in_addr_t * icmp_hostlist;

	icmp_hostlist = (in_addr_t *)malloc(sizeof(in_addr_t)*iTCP_PingCount);
 
	iMax = iICMP_PingCount; 
	for( int i = 0 ; i < iMax ; i++ ) 
	{ 
		Server *srv = m_ICMP_PingList->Item(i)->GetData(); 
		hostent *host = gethostbyname( TOCSTR(srv->Host) ); 
		 
		if( host == NULL ) 
		{ 
			iICMP_PingCount--; 
			continue; 
		} 
 
#ifdef UNIX
		icmp_hostlist[i] = ((IN_ADDR *)(host->h_addr_list[0]))->s_addr; 
#endif
#ifdef WIN32
		icmp_hostlist[i].s_addr = ((IN_ADDR *)(host->h_addr_list[0]))->s_addr; 
#endif
	} 
 
	m_ip->hostlist = (in_addr*)icmp_hostlist;
	m_ip->number_hosts = iICMP_PingCount;
	m_ip->packet_timeout_ms = 2000;
	m_ip->num_packets = 10;

	m_ip->userdata = m_ICMP_PingList;

	// fill the thread arg struct for tcp ping
	m_tp_ta->thread_args = m_tp;
#ifdef WIN32
	m_tp_ta->start_routine = (LPTHREAD_START_ROUTINE)tcp_ping_executor;
#endif
#ifdef UNIX
	m_tp_ta->start_routine = tcp_ping_executor;
#endif
	// fill the thread arg struct for icmp ping
	m_ip_ta->thread_args = m_ip;
#ifdef WIN32
	m_ip_ta->start_routine = (LPTHREAD_START_ROUTINE)icmp_ping_executor;
#endif
#ifdef UNIX
	m_ip_ta->start_routine = icmp_ping_executor;
#endif



	batch_add_thread_arg( m_batch, m_tp_ta );
	batch_add_thread_arg( m_batch, m_ip_ta );

	// Set the executor function 
#ifdef UNIX 
	m_test_executor = batch_executor; 
#endif 
#ifdef WIN32 
	m_test_executor = (LPTHREAD_START_ROUTINE)batch_executor; 
#endif 
 
 
	return true; 
} 
 
 
bool TestMarshall::InitTestEngine( int TestType ) 
{ 

	m_engp_downstream		= 0;
	m_engp_upstream			= 0;
	m_engp_downstream_ta	= 0;
	m_engp_upstream_ta		= 0;

	m_count_downstream_engp	= 0;
	m_count_upstream_engp	= 0;

	m_tp					= 0;
	m_ip					= 0;
	m_tp_ta					= 0;
	m_ip_ta					= 0;

	m_http					= 0;
	m_ftp					= 0;
	m_http_ta				= 0;
	m_ftp_ta				= 0;
	m_batch					= 0;
	m_ta					= 0;

	m_iTestType = TestType;

	m_ta = new_thread_arg_struct();  

	if( m_iTestType == STANDARD )
	{
		m_engp_downstream = new TPEngine*[1];
//		m_engp_upstream = new TPEngine*[1];					// not used but we will delete it in Deinit
		m_count_downstream_engp = 1;						// hardcoded - perform only one test
		m_engp_downstream[0] = CreateContext();
		if( m_engp_downstream[0] == NULL )
		{
			return false;
		}
		m_ta->thread_args = (void *)m_engp_downstream[0];
	}
	else if( m_iTestType == AVAILABILITY )
	{
		// Get a list of TCP Ping servers 
		m_TCP_PingList	= new ServerList(); 
		m_ICMP_PingList	= new ServerList(); 
 
		// Create the batch struct 
		m_batch = new_batch_arg_struct(); 
		 
		m_tp = new_tcp_ping_arg_struct();
		m_ip = new_icmp_ping_arg_struct();
		
		m_tp_ta = new_thread_arg_struct();
		m_ip_ta = new_thread_arg_struct();

		if( m_tp == NULL )
		{
			return false;
		}
		else if( m_ip == NULL )
		{
			free( m_tp ); // free the tcp ping struct allocated above
			return false;
		}

		m_ta->thread_args = (void *)m_batch;
	}
	else if( m_iTestType == RTT )
	{
		m_ip = new_icmp_ping_arg_struct();
		if( m_ip == NULL )
		{
		  return false;
		}
		m_ta->thread_args = (void *)m_ip;
	}
	else if( m_iTestType == THROUGHPUT )
	{
		// Create the TPEngine context in the setup function because
		// we need to know how many servers to allocate space for.

		m_batch = new_batch_arg_struct();
	
		m_http = new_curl_get_arg_struct(); 
		m_ftp = new_curl_get_arg_struct(); 

		m_TPTestList	= new ServerList(); 
		m_HTTPList	= new ServerList(); 
		m_FTPList	= new ServerList(); 

		if( m_http == NULL )
		{
			return false;
		}
		else if( m_ftp == NULL )
		{
			return false;
		}

		m_ta->thread_args = (void *)m_batch; 
	}
	else if( m_iTestType == TPTEST )
	{
		// allocate space for the TPEngine pointers
		m_engp_downstream = new struct TPEngine*[1];
//		m_engp_downstream_ta = new struct thread_arg_struct*[1];

		m_engp_downstream[0] = CreateContext();
		if( m_engp_downstream[0] == NULL )
		{
			return false;
		}
		m_ta->thread_args = (void *)m_engp_downstream[0];
	}
	else if( m_iTestType == FULL_TPTEST )
	{
		m_batch = new_batch_arg_struct();

		// allocate space for the TPEngine pointers
		m_engp_downstream = new struct TPEngine*[2];
		m_engp_upstream = new struct TPEngine*[2];
		m_engp_downstream_ta = new struct thread_arg_struct*[2];
		m_engp_upstream_ta = new struct thread_arg_struct*[2];
 
		m_engp_downstream[0] = CreateContext(); 
		m_engp_downstream[1] = CreateContext(); 
		m_engp_upstream[0] = CreateContext(); 
		m_engp_upstream[1] = CreateContext(); 

		m_engp_downstream_ta[0] = new_thread_arg_struct(); 
		m_engp_downstream_ta[1] = new_thread_arg_struct(); 
		m_engp_upstream_ta[0] = new_thread_arg_struct();
		m_engp_upstream_ta[1] = new_thread_arg_struct();

		m_ta->thread_args = (void *)m_batch;
	}
	return true;
} 
 
bool TestMarshall::DeinitTestEngine(bool abort) 
{ 
	if( abort == true ) 
	{ 
		m_ta->die = true;
		while( m_ta->executing ) 
		  {
#ifdef WIN32
			Sleep( 1000 ); 
#endif
#ifdef UNIX
			sleep(1);
#endif		   
		  }
	}

	if( m_iTestType == STANDARD )
	{
		DeleteContext(m_engp_downstream[0]);
	}
	else if( m_iTestType == AVAILABILITY )
	{
		delete m_TCP_PingList;
		delete m_ICMP_PingList;

		delete_tcp_ping_arg_struct(m_tp);
		delete_icmp_ping_arg_struct(m_ip);
		delete_batch_arg_struct(m_batch);
		free(m_tp_ta);
		free(m_ip_ta);
	}
	else if( m_iTestType == RTT )
	{
		delete m_ICMP_PingList;
		free(m_ip);
	}
	else if( m_iTestType == THROUGHPUT )
	{
		for( int i = 0 ; i < m_count_downstream_engp ; i++ )
		{
			// delete m_engp_downstream_ta /upstream_ta ??
			DeleteContext(m_engp_downstream[i]);
		}
		for( int i = 0 ; i < m_count_upstream_engp ; i++ )
		{
			// delete m_engp_downstream_ta /upstream_ta ??
			DeleteContext(m_engp_upstream[i]);
		}

		for( unsigned int i = 0 ; i < m_http->number_urls ; i++ )
		  {
		    free(m_http->url_list[i]);
		  }

		for( unsigned hdiutil create TPTEST_502b.dmg -volname "TPTEST 5.02b" -fs HFS+ -srcfolder dmgint i = 0 ; i < m_ftp->number_urls ; i++ )
		  {
		    free(m_ftp->url_list[i]);
		  }
		
		delete_curl_get_arg_struct(m_http);
		delete_curl_get_arg_struct(m_ftp);
 
		delete this->m_HTTPList;
		delete this->m_FTPList;
		delete this->m_TPTestList;
	}
	else if( m_iTestType == FULL_TPTEST )
	{
		DeleteContext(m_engp_downstream[0]);
		DeleteContext(m_engp_downstream[1]);
		DeleteContext(m_engp_upstream[0]);
		DeleteContext(m_engp_upstream[1]);
	}
	else if( m_iTestType == TPTEST )
	{
		DeleteContext( m_engp_downstream[0] );

		delete [] m_engp_downstream;
//		delete [] m_engp_downstream_ta;
	}

	free(m_ta);
 
	return true; 
} 
 
bool TestMarshall::Execute(void) 
{ 
	/* create executor thread, specify tcp_ping_executor as thread function */
	#ifdef UNIX
	if( pthread_create(&m_thread, NULL, m_test_executor, (void *)m_ta) != 0 )
	#endif

	#ifdef WIN32
	m_thread = CreateThread( NULL, 0, m_test_executor, (PVOID)m_ta, 0, &m_threadid); 
	if( m_thread == NULL ) 
	#endif
	
	  // from either of the ifdefs above
	  {
	    m_strLastError = "Failed to create thread";
	    return false;
	  }  
	return true; 
} 
 
TestMarshall* TestMarshall::GetInstance(void) 
{ 
	if( s_instance == 0 ) 
	{ 
		s_instance = new TestMarshall(); 
	} 
	return s_instance; 
} 
 
int	 TestMarshall::GetProgress(void) 
{ 
	return m_ta->progress; 
} 
 
bool TestMarshall::GetRunningState(void) 
{ 
	return m_ta->executing; 
} 
 
bool TestMarshall::GetCompletedStatus(void) 
{ 
	return m_ta->completion; 
} 
 
int TestMarshall::GetLastError(void) 
{ 
	return m_ta->error; 
} 
 
TPEngine* TestMarshall::GetTPEngineStruct(int index) 
{ 
	return m_engp_downstream[index]; 
} 
 
TPEngine* TestMarshall::GetDownstreamTPEngineStruct(int index) 
{ 
	return m_engp_downstream[index]; 
} 
 
TPEngine* TestMarshall::GetUpstreamTPEngineStruct(int index) 
{ 
	return m_engp_upstream[index]; 
} 
 
int TestMarshall::GetTPEngineCount(void) 
{ 
	return GetDownstreamTPEngineCount(); 
} 
 
int TestMarshall::GetDownstreamTPEngineCount(void) 
{ 
	return m_count_downstream_engp; 
} 
 
int	TestMarshall::GetUpstreamTPEngineCount(void) 
{ 
	return m_count_upstream_engp; 
} 
 
tcp_ping_arg_struct* TestMarshall::GetTCPPingStruct(void) 
{ 
	return m_tp; 
} 
 
 
 
 
icmp_ping_arg_struct* TestMarshall::GetICMPPingStruct(void) 
{ 
	return m_ip; 
} 
 
bool TestMarshall::SetupRTTTest( ServerList *slist) 
{ 
 
	// Get a list of ICMP Ping servers 
	m_ICMP_PingList = new ServerList(); 
		 
	for ( ServerList::Node *node = slist->GetFirst(); node; node = node->GetNext() ) 
	{ 
		Server *srv = node->GetData(); 
 
		if( srv->EnableRTTPacketloss && 
			srv->IsICMP ) 
		{ 
			m_ICMP_PingList->Append( srv ); 
		} 
	} 
 
	int iICMP_PingCount = (int)m_ICMP_PingList->GetCount(); 
 
	if( iICMP_PingCount == 0 ) 
	{ 
	  return false; 
	} 
 
	in_addr_t * hostlist;

	hostlist = (in_addr_t *)malloc(sizeof(in_addr_t)*iICMP_PingCount);
 
	int iMax = iICMP_PingCount; 
	for( int i = 0 ; i < iMax ; i++ ) 
	{ 
		Server *srv = m_ICMP_PingList->Item(i)->GetData(); 
		if (inet_addr(TOCSTR(srv->Host)) == INADDR_NONE) 
		{ 
		  hostent *host = gethostbyname( TOCSTR(srv->Host) ); 
		  if( host == NULL ) 
		    { 
		      iICMP_PingCount--; 
		      continue; 
		    } 
#ifdef WIN32
			hostlist[i].s_addr = ((IN_ADDR *)(host->h_addr_list[0]))->s_addr; 
#endif
#ifdef UNIX
			hostlist[i] = ((IN_ADDR *)(host->h_addr_list[0]))->s_addr; 
#endif
		} 
		else 
		  { 
#ifdef WIN32
			  hostlist[i].s_addr  = inet_addr(TOCSTR(srv->Host)); 
#endif
#ifdef UNIX
			  hostlist[i] = inet_addr(TOCSTR(srv->Host)); 
#endif
		  } 
		
 
	} 

	m_ip->hostlist = (in_addr*)hostlist;
	m_ip->number_hosts = iICMP_PingCount;
	m_ip->num_packets = 20;
	m_ip->packetsize = 100;
	m_ip->packet_interval_ms = 100;
	m_ip->packet_timeout_ms = 2000; 

	m_ip->userdata = m_ICMP_PingList;

	// Set the executor function 
#ifdef UNIX 
	m_test_executor = icmp_ping_executor; 
#endif 
#ifdef WIN32 
	m_test_executor = (LPTHREAD_START_ROUTINE)icmp_ping_executor; 
#endif 
 
 
	return true; 
} 
 
 
/* 
	Argument ServerList is an already filtered version of g_ServerList. 
	It contains only the servers with applicable settings for this particular 
	test. 
*/ 
bool TestMarshall::SetupThroughputest(ServerList *slist) 
{ 
	// Get a list of TCP Ping servers 
	for ( ServerList::Node *node = slist->GetFirst(); node; node = node->GetNext() ) 
	{ 
		Server *srv = node->GetData(); 
 
		if( srv->EnableThroughput ) 
		{ 
			if( srv->EnableThroughputTPTest ) 
				m_TPTestList->Append( srv ); 
			if( srv->EnableThroughputHTTP ) 
				m_HTTPList->Append( srv ); 
			if( srv->EnableThroughputFTP ) 
				m_FTPList->Append( srv ); 
		} 
	} 
 
	if( m_TPTestList->GetCount() == 0 && 
		m_HTTPList->GetCount() == 0 && 
		m_FTPList->GetCount() == 0 ) 
	{ 
		return false; 
	} 
	m_count_downstream_engp = (int)m_TPTestList->GetCount(); 
	m_count_upstream_engp = (int)m_TPTestList->GetCount(); 

	// allocate space for the TPEngine pointers
	m_engp_upstream = new struct TPEngine*[m_count_upstream_engp];
	m_engp_downstream = new struct TPEngine*[m_count_downstream_engp];
	m_engp_downstream_ta = new struct thread_arg_struct*[m_count_downstream_engp];
	m_engp_upstream_ta = new struct thread_arg_struct*[m_count_upstream_engp];
	
	// create the TPEngine contexts,
	// configure the TPEngines and add them to the batch
	// user m_countdown_stream_engp
	int i;
	for( i = 0 ; i < m_count_downstream_engp ; i++ )
	{
		Server *srv = m_TPTestList->Item(i)->GetData();

		m_engp_upstream[i] = CreateContext();
		m_engp_downstream[i] = CreateContext();
		m_engp_upstream_ta[i] = new_thread_arg_struct();
		m_engp_downstream_ta[i] = new_thread_arg_struct();

		m_engp_downstream[i]->userdata = srv;
		m_engp_upstream[i]->userdata = srv;


		hostent *host = gethostbyname( TOCSTR(srv->Host) ); 
 
		if( host == NULL ) 
		{ 
			return false; 
		} 
 
 
		m_engp_downstream[i]->hostIP.s_addr = ((IN_ADDR *)(host->h_addr_list[0]))->s_addr;
		m_engp_upstream[i]->hostIP.s_addr = ((IN_ADDR *)(host->h_addr_list[0]))->s_addr;
 
		long port; 
		srv->TPTest_Port.ToLong( &port ); 
		m_engp_downstream[i]->hostCtrlPort = (unsigned short)port;
		m_engp_upstream[i]->hostCtrlPort = (unsigned short)port;

		strcpy(m_engp_downstream[i]->clientInfo, "tptest5 V1.0");  
		strcpy(m_engp_upstream[i]->clientInfo, "tptest5 V1.0");  


		m_engp_downstream[i]->sessionMaxTime = 30;
		m_engp_upstream[i]->sessionMaxTime = 30;


#ifdef DO_SHORT_TPTEST 
		// Only for testing
		m_engp_downstream[i]->tpMode = CLM_TCP_RECV;
		m_engp_upstream[i]->tpMode = CLM_TCP_SEND;
	
		m_engp_downstream[i]->tcpBytes = 100000;
		m_engp_upstream[i]->tcpBytes = 100000;
#else
		m_engp_downstream[i]->tpMode = CLM_AUTO_TCP_RECV;
		m_engp_upstream[i]->tpMode = CLM_AUTO_TCP_SEND;
#endif

		m_engp_upstream_ta[i]->thread_args = m_engp_upstream[i];
		m_engp_downstream_ta[i]->thread_args = m_engp_downstream[i];

#ifdef WIN32
		m_engp_upstream_ta[i]->start_routine = (LPTHREAD_START_ROUTINE)tp_test_executor;
		m_engp_downstream_ta[i]->start_routine = (LPTHREAD_START_ROUTINE)tp_test_executor;
#endif
#ifdef UNIX
		m_engp_upstream_ta[i]->start_routine = tp_test_executor;
		m_engp_downstream_ta[i]->start_routine = tp_test_executor;
#endif

		batch_add_thread_arg( m_batch, m_engp_upstream_ta[i] );
		batch_add_thread_arg( m_batch, m_engp_downstream_ta[i] );
	}

	// HTTP Curl stuff
	m_http = new_curl_get_arg_struct(); 
	m_http_ta = new_thread_arg_struct(); 
	m_http_ta->thread_args = (void *)m_http; 

#ifdef WIN32
	m_http_ta->start_routine = (LPTHREAD_START_ROUTINE)curl_get_executor;
#endif
#ifdef UNIX
	m_http_ta->start_routine = curl_get_executor;
#endif

	m_http->number_urls = (unsigned int)(m_HTTPList->GetCount()); 
	m_http->url_list = (char **) malloc(sizeof(char *) * m_http->number_urls);

	m_http->userdata = m_HTTPList;

	i = 0;
	for( ServerList::Node *node = m_HTTPList->GetFirst(); node; node = node->GetNext() ) 
	  { 
	    Server	*current = node->GetData(); 
	    wxString *url = new wxString(); 
	    *url << wxT("http://") << current->Host << current->HTTP_Path; 
	    m_http->url_list[i] = strdup((char*)TOCSTR(*url));
	    i++;		 
	  }

	batch_add_thread_arg( m_batch, m_http_ta );

	// FTP Curl stuff
	m_ftp = new_curl_get_arg_struct(); 
	m_ftp_ta = new_thread_arg_struct(); 
	m_ftp_ta->thread_args = (void *)m_ftp; 
#ifdef WIN32
	m_ftp_ta->start_routine = (LPTHREAD_START_ROUTINE)curl_get_executor;
#endif
#ifdef UNIX
	m_ftp_ta->start_routine = curl_get_executor;
#endif
	m_ftp->number_urls = (unsigned int)(m_FTPList->GetCount()); 
	m_ftp->url_list = (char **) malloc(sizeof(char *) * m_ftp->number_urls);

	m_ftp->userdata = m_FTPList;

	i = 0;
	for( ServerList::Node *node = m_FTPList->GetFirst(); node; node = node->GetNext() ) 
    { 
        Server	*current = node->GetData(); 
		wxString *url = new wxString(); 
		*url << wxT("ftp://") << current->Host << current->FTP_Path; 
		m_ftp->url_list[i] = strdup((char*)TOCSTR(*url));
        i++;		 
	}

	batch_add_thread_arg( m_batch, m_ftp_ta );

	// Set the executor function 
#ifdef UNIX 
	m_test_executor = batch_executor; 
#endif 
#ifdef WIN32 
	m_test_executor = (LPTHREAD_START_ROUTINE)batch_executor; 
#endif 
 
 
	return true; 
} 
 
 
 
/* 
	Setup the TPTest - depending on the argument values different tests will be performed, 
	TCP up/down, UDP up/down/fullduplex. 
*/ 
bool TestMarshall::SetupTPTest( wxString &Host,  
								wxString &Port, 
								wxString &Timeout, 
								wxString &Direction, 
								wxString &TCPBytes, 
								wxString &UDPPPS, 
								wxString &UDPPSize, 
								wxString &UDPRate, 
								wxString &UDPTestTime ) 
{ 
 
	// The general setup before a TPTest 
  hostent *host = gethostbyname( TOCSTR(Host) ); 
	if( host == NULL ) 
	{ 
		return false; 
	} 
	m_engp_downstream[0]->hostIP.s_addr = ((IN_ADDR *)(host->h_addr_list[0]))->s_addr;
	 
	long port; 
	if( !Port.ToLong( &port ) ) 
	{ 
		return false; 
	} 
	m_engp_downstream[0]->hostCtrlPort = (unsigned short)port;

 
 
	strcpy(m_engp_downstream[0]->clientInfo, "tptest5 V1.0");  
 
 

	// check what type of test we have
	int tpMode = 0;
	if( TCPBytes.Length() > 0 )
	{
		long timeout; 
		if( !Timeout.ToLong( &timeout) ) 
		{ 
			return false; 
		} 
		m_engp_downstream[0]->sessionMaxTime = (unsigned short)timeout;


		if( Direction == wxT("UP") )
			tpMode = CLM_TCP_SEND;
		else if( Direction == wxT("DOWN") )
			tpMode = CLM_TCP_RECV;
		else
			return false;
	
		m_engp_downstream[0]->tpMode = tpMode;

		long tcpBytes;
		if( TCPBytes.ToLong( &tcpBytes ) )
			m_engp_downstream[0]->tcpBytes = (unsigned int)tcpBytes;
		else
			return false;
	}
	else if(	(
				(UDPPPS.Length() > 0 || UDPPSize.Length() > 0)
				||
				UDPRate.Length() > 0 
				)
				&&
				UDPTestTime.Length() > 0 )
	{
	  if( Direction == wxT("UP") )
	    tpMode = CLM_UDP_SEND;
	  else if( Direction == wxT("DOWN") )
			tpMode = CLM_UDP_RECV;
	  else if( Direction == wxT("FD") )
	    tpMode = CLM_UDP_FDX;
	  else
	    return false;
	
		m_engp_downstream[0]->tpMode = tpMode;

		long size;
		long pps;
		long rate;

		if( UDPPPS.ToLong( &pps ) && UDPPSize.ToLong( &size ) 
			&& pps > 0 && size > 0 )
		{
			m_engp_downstream[0]->packetSize = (unsigned int)size;
			m_engp_downstream[0]->packetsPerSecond = (unsigned int)pps;
		}
		else if( UDPRate.ToLong( &rate )
				 && rate > 0 )
		{
			m_engp_downstream[0]->bitsPerSecond = rate;
			RecalculatePPSSZ( m_engp_downstream[0] ); 
		}

		long testtime;
		if( UDPTestTime.ToLong( &testtime) )
		{
			m_engp_downstream[0]->sessionTime = (unsigned int)testtime;
			m_engp_downstream[0]->sessionMaxTime = m_engp_downstream[0]->sessionTime * 2 + 5;
		}
		else
		{
			return false;
		}
	}
	else
	{
		return false;
	}
 
 
// Set the executor function 
#ifdef UNIX 
	m_test_executor = tp_test_executor; 
#endif 
#ifdef WIN32 
	m_test_executor = (LPTHREAD_START_ROUTINE)tp_test_executor; 
#endif 
 
 
	return true; 
} 
 
int	TestMarshall::GetTestType(void) 
{ 
	return this->m_iTestType; 
} 
 
// Recalculate good PPS and Packetsize values after the user has changed
// the desired data rate. 
bool TestMarshall::RecalculateUDPFields( unsigned int rate, unsigned int &pps, unsigned int &psize ) 
{ 
	struct TPEngine *eng = CreateContext();
	eng->bitsPerSecond = rate;
	RecalculatePPSSZ( eng ); 
	psize = eng->packetSize; 
	pps = eng->packetsPerSecond; 
	DeleteContext(eng); 
	return true; 
} 
 
curl_get_arg_struct* TestMarshall::GetCurlHTTPStruct() 
{ 
	return m_http; 
} 
 
curl_get_arg_struct* TestMarshall::GetCurlFTPStruct() 
{ 
	return m_ftp; 
} 
 
const char * TestMarshall::GetProgressString() 
{ 
	if (m_ta != NULL) 
		return m_ta->progress_str; 
	return ""; 
} 
 
 
 
 
